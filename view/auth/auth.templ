package auth


import (
  "github.com/alfredomagalhaes/go-ai-images/view/layout"
	"github.com/nedpals/supabase-go"
)

templ AccountSetup() {
	@layout.App(true) {
		<div class="max-w-xl bg-base-300 px-6 py-12 w-full mx-auto mt-4 rounded-xl"> 
			<h1 class="text-xl font-black mb-8 text-center">Setup your account</h1>
      @AccountSetupForm(AccountSetupParams{},AccountSetupErrors{})
    </div>
	}
}

type AccountSetupErrors struct {
	UserName string
}
type AccountSetupParams struct {
	UserName string
}

templ AccountSetupForm( params AccountSetupParams, errors AccountSetupErrors) {
	<form
		hx-post="/account/setup"
		hx-swap="outerHTML"
	>
		<label class="input input-bordered flex items-center gap-2 mb-4">
			<div class="label">
				<span class="label-text-alt">Enter your name</span>
			</div>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="w-4 h-4 opacity-70"><path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6ZM12.735 14c.618 0 1.093-.561.872-1.139a6.002 6.002 0 0 0-11.215 0c-.22.578.254 1.139.872 1.139h9.47Z" /></svg>
			<input type="text" name="username" class="grow" />
			<div class="label">
				if len(errors.UserName) > 0 {
					<span class="label-text-alt text-error"> {errors.UserName} </span>
				}
			</div>
		</label>
		<button type="submit" class="btn btn-primary">Submit</button>
	</form>

}

templ Login() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Login to goAIimages</h1>
				
					@LoginForm(supabase.UserCredentials{},LoginErrors{})
				
			</div>
		</div>
	}
}


templ Signup() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Signup to goAIimages</h1>
				
					@SignupForm(SignupParams{},SignupErrors{})
				
			</div>
		</div>
	}
}


templ SignupSuccess(email string) {
		<div>A confirmation email has been sent to: <span class="font-semibold text-success">{ email }</span></div>
}

type LoginErrors struct {
	Email string
	Password string
	InvalidCredentials string
}

type SignupParams struct {
	Email string
	Password string
	ConfirmPassword string
}

type SignupErrors struct {
	Email string
	Password string
	ConfirmPassword string
}

templ SignupForm(params SignupParams, errors SignupErrors){
	<form 
		hx-post="/signup"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" value={params.Email} name="email" required class="input input-bordered w-full" />
			if len(errors.Email) > 0 { 
				<div class="label">
					<span class="label-text-alt text-error">{errors.Email}</span>
				</div>
			}
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" required class="input input-bordered w-full" />
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{errors.Password}</span>
				</div>
			}
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Confirm Password</span>
			</div>
			<input type="password" name="confirmPassword" required  class="input input-bordered w-full" />
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{errors.ConfirmPassword}</span>
				</div>
			}
		</label>
		
		<button type="submit" class="btn btn-primary w-full">login <i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

templ LoginForm(creds supabase.UserCredentials, errors LoginErrors){
	<form 
		hx-post="/login"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" value={creds.Email} name="email" required placeholder="Type here" class="input input-bordered w-full" />
			if len(errors.Email) > 0 { 
				<div class="label">
					<span class="label-text-alt text-error">{errors.Email}</span>
				</div>
			}
		</label>
		<label class="form-control w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" required placeholder="Type here" class="input input-bordered w-full" />
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{errors.Password}</span>
				</div>
			}
		</label>
		if len(errors.InvalidCredentials) > 0 {
			<div class="text-sm text-error">{errors.InvalidCredentials}</div>
		}
		<button type="submit" class="btn btn-primary w-full">login <i class="fa-solid fa-arrow-right"></i></button>
		<div class="divider">OR</div>
		<a href="/login/provider/google" class="btn btn-outline w-full"><i class="fa-brands fa-google"/>login with Google</a>
	</form>
}

templ CallbackScript(){
	<script>
		var url = window.location.href;
		var newURL = url.replace("#", "?")
		window.location = newURL
	</script>
}